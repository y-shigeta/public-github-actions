name: test
on:
#  schedule:
#    - cron:  '35 12 * * *'
  push:
#  pull_request:
    branches:
      - main
#    paths:
#      - "src/**"
#      - "!*.md"
  workflow_dispatch:
    inputs:
      target_env:
        type: choice
        required: true
        options:
          - "dev"
          - "stg"

jobs:
  set-env:
    name: set-env
    runs-on: ubuntu-latest
    outputs:
      stage: ${{ steps.setenv.outputs.stage }}
#    env: 
#      test1: ${{ fromJSON( '["A", "B", "C"]')[1] }}
#      test2: ${{ fromJSON( '[ { "C" : "A" }]') }}
    steps:
      - name: set env
        id: setenv
        if: ${{ github.event.inputs.target_env }} )
        run: | 
          if [ -n "${{ github.event.inputs.target_env }}" ]; then 
            echo "stage={\"include\":[{\"env\":\"${{ github.event.inputs.target_env }}\"}]}" >> $GITHUB_OUTPUT 
          else 
            #obj=$(jq -c -n '["A", "B", "C"]')
            #echo ${{ env.test1 }}
            #obj=$(echo '{ "env" : "dev" }' | jq -c)
            #echo "stage=${obj}"
            echo "stage={.:[{\"env\":\"dev\"},{\"env\":\"stg\"}]}" >> $GITHUB_OUTPUT
            #echo "stage={\"include\":[{\"env\":\"dev\"},{\"env\":\"stg\"}]}" >> $GITHUB_OUTPUT
            echo "stage={\"include\":[{\"env\":\"dev\"},{\"env\":\"stg\"}]}"
          fi
           
  env-check:
    needs: set-env
    strategy:
      matrix: ${{ fromJson(needs.set-env.outputs.stage) }}
    env: 
      env_name: ${{ matrix.env }}
#      env_name: ${{ fromJson(needs.set-env.outputs.stage) }}
    runs-on: ubuntu-latest
    steps:
      - name: echo
        run: |
          echo "env.env_name ${{ env.env_name }}"
#          echo "env.env_name ${{ needs.set-env.outputs.stage }}"
#          echo "stage ${{ needs.set-env.outputs.stage }}"

#  test1:
#    name: check-ut
#    runs-on: ubuntu-latest
#    steps:
#      - name: checkout repo
#        uses: actions/checkout@v4
#
#  test2:
#    name: check-it
#    runs-on: ubuntu-latest
#    steps:
#      - name: checkout repo
#        uses: actions/checkout@v4
#      
##      - name: failure
##        run: exit 1
#      
#  merge-check:
#    name: mergecheck
#    needs: [test1, test2]
##    if: success() 
#    runs-on: ubuntu-latest
#    steps:
##      - name: checkout repo
##        uses: actions/checkout@v4
#      
#      - name: echo
#        run: echo "merge can be done"
      